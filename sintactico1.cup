
package FlexCup1;

import java_cup.runtime.*;
import java.io.FileReader;
   

parser code {:    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        String info1=info+"";
        String[] info2=info1.split("#");
        if (sym.EOF==Integer.parseInt(info2[1])) {
            System.err.println("Error en: Falta el fin de linea ; ");
            //System.exit(1);
        }else{
          if (sym.FINLINEA==Integer.parseInt(info2[1])) {
                System.err.println("Error en ; ");
            //System.exit(1);
          }
        }

        if(info instanceof java_cup.runtime.Symbol) {
          java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
          /* Comprueba si el numero de lÃ­nea es mayor o igual que cero */
          if(s.left >= 0) {
            m.append(" en linea "+(s.left+1));
            /*Comprueba si el numero de columna es mayoro igual que cero */
            if (s.right >= 0)
              m.append(", y columna "+(s.right+1));
          }
        }
        m.append(" : "+message);
        //System.err.println(m);          
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
        
    public static void main(String[] args){

        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  
   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */

terminal String   MINUSCULA,MAYUSCULA,FINLINEA,ESPACIO;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

non terminal   Object  expr_list, expr_part;
non terminal   String  expr;



/*GRAMATICA*/
expr_list ::= expr_list expr_part
                  |
                  expr_part
                  ;

   
expr_part ::= expr:e  
                  {:
                    System.out.println(" = " + e); 
                  :} 
                  FINLINEA
                 ;

expr  ::=  expr:e MAYUSCULA:mayus
            {:
                RESULT=e+""+mayus.toLowerCase();
            :}
            |expr:e MINUSCULA:minus
              {:
                  RESULT=e+""+(minus.toUpperCase()); 
              :}
            |expr:e ESPACIO:espa
              {:
                  RESULT=e+""+(espa); 
              :}
            |MAYUSCULA:mayus
              {:
                  RESULT=mayus.toLowerCase();
              :}
            |MINUSCULA:minus
              {:
                  RESULT=minus.toUpperCase();
              :}
            |ESPACIO:espa
              {:
                  RESULT=espa; 
              :}
            ;